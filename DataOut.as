package {	import flash.display.*;	import flash.events.*;//for event handling	import flash.utils.*;	import flash.external.ExternalInterface;	public class DataOut extends Sprite	{		public var myTimer:Timer;		public var jsTimer:Timer;		public var timeCount:uint;		public var hasStarted:Boolean;		public function DataOut()		{			var self = this;			data1.text = "Stop";			timeCount = 0;			hasStarted = false;			waitForJs();		}		public function timerFunction(event:TimerEvent)		{			//trace("Timer function executed");			data1.text = "Timer: " + timeCount++;			if (ExternalInterface.available)			{				ExternalInterface.call("trace",timeCount);			}		}		public function checkJs(event:TimerEvent)		{			if (ExternalInterface.available)			{				var jsReady:Boolean = ExternalInterface.call("isReady");				if (jsReady)				{					jsTimer.stop();					getData();				}				else				{					data1.text = "JS is not Ready";				}			}		}		public function checkJsStopped(event:TimerEvent)		{			data1.text = "JS failed to start";		}		public function getData()		{			if (! hasStarted)			{				hasStarted = true;				myTimer = new Timer(100,1000);				myTimer.addEventListener(TimerEvent.TIMER, timerFunction);				myTimer.start();			} else {				trace("tried to start getData() again");			}		}		private function waitForJs()		{			jsTimer = new Timer(100,50);			jsTimer.addEventListener(TimerEvent.TIMER, checkJs);			jsTimer.addEventListener(TimerEvent.TIMER_COMPLETE, checkJsStopped);			jsTimer.start();		}		private function receivedFromJavaScript(value:String):void		{			trace("JavaScript says: " + value + "\n");		}		private function checkJavaScriptReady():Boolean		{			var isReady:Boolean = false;			if (ExternalInterface.available)			{				isReady = ExternalInterface.call("isReady");			}			return isReady;		}	}}